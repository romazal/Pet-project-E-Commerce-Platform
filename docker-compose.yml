services:

  # MySQL for User, Vendor, and Product Databases
  mysql:
    image: mysql
    container_name: mysql-db
    environment:
      MYSQL_ROOT_PASSWORD: 123456
      MYSQL_USER: romazal
      MYSQL_PASSWORD: 123456
    ports:
      - "3316:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./init/mysql:/docker-entrypoint-initdb.d
    networks:
      - ecommerce-network

  # Adminer for MySQL Management
  adminer:
    image: adminer
    container_name: adminer
    ports:
      - "8080:8080"
    networks:
      - ecommerce-network
    depends_on:
      - mysql

  # PostgreSQL for Orders and Supply Chain/Delivery Databases
  postgres:
    image: postgres
    container_name: postgres-db
    environment:
      POSTGRES_USER: romazal
      POSTGRES_PASSWORD: 123456
    ports:
      - "6543:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init/postgres:/docker-entrypoint-initdb.d
    networks:
      - ecommerce-network

  # pgAdmin for PostgreSQL Management
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: 123456
    ports:
      - "5050:80"
    networks:
      - ecommerce-network
    depends_on:
      - postgres

  # Redis for caching
  redis:
    image: redis
    container_name: redis-cache
    ports:
      - "6379:6379"
    networks:
      - ecommerce-network

  # RedisInsight for Redis Management
  redisinsight:
    image: redis/redisinsight
    container_name: redisinsight
    ports:
      - "8001:8001"
    networks:
      - ecommerce-network
    depends_on:
      - redis

  # MongoDB for Notification Service
  mongo:
    image: mongo
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - ecommerce-network
    environment:
      MONGO_INITDB_ROOT_USERNAME: romazal
      MONGO_INITDB_ROOT_PASSWORD: 123456

  # Mongo Express for MongoDB Management
  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_ADMINUSERNAME: romazal
      ME_CONFIG_MONGODB_ADMINPASSWORD: 123456
    ports:
      - "8081:8081"
    networks:
      - ecommerce-network
    depends_on:
      - mongo

  # Kafka for Event-driven communication in KRaft mode (without Zookeeper)
  kafka:
    image: 'bitnami/kafka:latest'
    container_name: kafka
    ports:
      - '9094:9094'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_CONTROLLER_BROKER_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    volumes:
      - kafka-data:/bitnami/kafka/data
    networks:
      - ecommerce-network

  # Kafka UI for Kafka Management
  kafka-ui:
    image: 'provectuslabs/kafka-ui'
    container_name: kafka-ui
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_USERNAME=romazal
      - KAFKA_CLUSTERS_0_PASSWORD=123456
    ports:
      - "8082:8080"
    networks:
      - ecommerce-network
    depends_on:
      - kafka

  # Zipkin for distributed tracing and performance monitoring.
  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    networks:
      - ecommerce-network

# Service networks
networks:
  ecommerce-network:
    driver: bridge

# Data volumes
volumes:
  mysql-data:
  postgres-data:
  mongo-data:
  kafka-data:
